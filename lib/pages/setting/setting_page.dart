import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../../auth/auth_provider.dart';
import '../../auth/login.dart';
import 'settings_provider.dart';
import '../profile_page.dart'; // üëà trang th√¥ng tin t√†i kho·∫£n

// import file i18n ƒë√£ generate trong lib/l10n
import 'package:chitieu/l10n/app_localizations.dart';

class SettingsPage extends StatelessWidget {
  const SettingsPage({super.key});

  Future<void> _openProfileOrLogin(BuildContext context) async {
    final auth = context.read<AuthProvider>();

    if (!auth.isAuthenticated) {
      // m·ªü trang ƒëƒÉng nh·∫≠p tr∆∞·ªõc
      await Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const LoginPage()),
      );

      // n·∫øu ƒëƒÉng nh·∫≠p xong th√¨ m·ªü lu√¥n trang h·ªì s∆°
      if (!context.mounted) return;
      if (context.read<AuthProvider>().isAuthenticated) {
        await Navigator.push(
          context,
          MaterialPageRoute(builder: (_) => const ProfilePage()),
        );
      }
    } else {
      // ƒë√£ ƒëƒÉng nh·∫≠p ‚Üí m·ªü trang h·ªì s∆°
      await Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const ProfilePage()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final t = AppLocalizations.of(context)!;       // l·∫•y text theo ng√¥n ng·ªØ
    final auth = context.watch<AuthProvider>();    // theo d√µi tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    final settings = context.watch<SettingsProvider>(); // theo d√µi c√†i ƒë·∫∑t theme, locale, text scale
    final name = auth.user?['name'] ?? '';         // t√™n ng∆∞·ªùi d√πng

    // danh s√°ch m√†u ch·ªß ƒë·∫°o -> MaterialColor
    const seedPalette = <MaterialColor>[
      Colors.blue,
      Colors.green,
      Colors.purple,
      Colors.orange,
      Colors.amber,
    ];

    return Scaffold(
      resizeToAvoidBottomInset: true,
      body: SafeArea(
        child: ListView(
          padding: const EdgeInsets.fromLTRB(16, 16, 16, 120), // ch·ª´a ch·ªó cho FAB + BottomAppBar
          children: [
            // ======================
            // Header (t√™n + avatar) -> b·∫•m ƒë·ªÉ m·ªü h·ªì s∆° / ƒëƒÉng nh·∫≠p
            // ======================
            InkWell(
              borderRadius: BorderRadius.circular(12),
              onTap: () => _openProfileOrLogin(context),
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 18),
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.primary,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    const CircleAvatar(radius: 32, backgroundColor: Colors.white),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Text(
                        name.isNotEmpty ? name : t.userNamePlaceholder,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: TextStyle(
                          color: Theme.of(context).colorScheme.onPrimary,
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    // hi·ªÉn th·ªã m≈©i t√™n n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, bi·ªÉu t∆∞·ª£ng ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a
                    Icon(
                      auth.isAuthenticated ? Icons.arrow_forward_ios : Icons.login,
                      color: Colors.white,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 10),

            // ======================
            // Ng√¥n ng·ªØ
            // ======================
            ListTile(
              dense: true,
              visualDensity: VisualDensity.compact,
              title: Text(t.language),
              trailing: DropdownButton<Locale>(
                value: settings.locale,
                items: const [
                  DropdownMenuItem(value: Locale('vi'), child: Text('Ti·∫øng Vi·ªát')),
                  DropdownMenuItem(value: Locale('en'), child: Text('English')),
                ],
                onChanged: (v) {
                  if (v != null) context.read<SettingsProvider>().setLocale(v);
                },
              ),
            ),
            const Divider(),

            // ======================
            // S√°ng / T·ªëi
            // ======================
            SwitchListTile(
              title: Text(t.brightness),
              value: settings.themeMode == ThemeMode.light,
              onChanged: (isLight) =>
                  context.read<SettingsProvider>().toggleTheme(isLight),
            ),
            const Divider(),

            // ======================
            // M√†u ch·ªß ƒë·∫°o
            // ======================
            ListTile(
              title: Text(t.color),
              subtitle: Wrap(
                spacing: 10,
                runSpacing: 10,
                children: [
                  for (final MaterialColor c in seedPalette)
                    InkWell(
                      onTap: () => context.read<SettingsProvider>().setSeed(c),
                      child: CircleAvatar(backgroundColor: c, radius: 14),
                    ),
                ],
              ),
            ),
            const Divider(),

            // ======================
            // C·ª° ch·ªØ
            // ======================
            ListTile(
              title: Text(t.fontSize),
              trailing: DropdownButton<String>(
                value: settings.textScale == 0.9
                    ? 'small'
                    : (settings.textScale == 1.15 ? 'large' : 'normal'),
                items: [
                  DropdownMenuItem(value: 'small', child: Text(t.fontSmall)),
                  DropdownMenuItem(value: 'normal', child: Text(t.fontNormal)),
                  DropdownMenuItem(value: 'large', child: Text(t.fontLarge)),
                ],
                onChanged: (v) {
                  if (v == 'small') {
                    context.read<SettingsProvider>().setTextScale(0.9);
                  } else if (v == 'large') {
                    context.read<SettingsProvider>().setTextScale(1.2);
                  } else {
                    context.read<SettingsProvider>().setTextScale(1.0);
                  }
                },
              ),
            ),
            const Divider(),

            // ======================
            // ƒê·ªïi m·∫≠t kh·∫©u
            // ======================
            Padding(
              padding: const EdgeInsets.symmetric(vertical: 12),
              child: OutlinedButton(
                onPressed: () {
                  // TODO: m·ªü form ƒë·ªïi m·∫≠t kh·∫©u
                },
                child: Text(t.changePassword),
              ),
            ),

            // ======================
            // ƒêi·ªÅu l·ªá & B·∫£o m·∫≠t
            // ======================
            ListTile(
              title: Text(t.policy),
              trailing: TextButton(
                onPressed: () {
                  // TODO: m·ªü trang policy
                },
                child: Text(t.view),
              ),
            ),

            // Spacer cu·ªëi ch·ªëng tr√†n
            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }
}
